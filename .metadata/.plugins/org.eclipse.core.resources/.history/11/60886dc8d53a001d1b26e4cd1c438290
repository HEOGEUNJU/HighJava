package kr.or.ddit.basic;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

/*
 * 학번, 이름, 국어점수, 영어점수, 수학점수, 총점, 등수를 멤버로 갖는
	  Student클래스를 만든다.
	  생성자는 학번, 이름, 국어, 영어, 수학 점수만 매개변수로 받아서 처리한다.
	  
	  이 Student객체들은 List에 저장하여 관리한다.
	  List에 저장된 데이터들을 학번의 오름차순으로 정렬하여 출력하는 부분과
	  총점의 역순으로 정렬하는 부분을 프로그램 하시오.
	  (총점이 같으면 학번의 내림차순으로 정렬되도록 한다.)
	  (학번 정렬기준은 Student클래스 자체에서 제공하도록 하고,
	   총점 정렬기준은 외부클래스에서 제공하도록 한다.)
 */
public class StudentList {
	public static void main(String[] args) {
		List<Student> stuList = new ArrayList<Student>();
		stuList.add(new Student("123423", "두부", 66, 77, 88, 231));
		stuList.add(new Student("124623", "김치", 75, 85, 84, 244));
		stuList.add(new Student("134523", "간장", 77, 78, 60, 215));
		stuList.add(new Student("123123", "초코", 65, 90, 50, 215));
		stuList.add(new Student("121113", "치즈", 80, 95, 80, 255));
		System.out.println("정렬 전 : ");
		for (Student stu : stuList) {
			System.out.println(stu);
		}
		System.out.println(
				"-----------------------------------------------------------------------------------------------------");

//		SortStuNumDesc.sort(stuList, new SortStuNumDesc());
		Collections.sort(stuList);

		System.out.println("학번순으로 오름차순 : ");
		for (Student stu : stuList) {
			System.out.println(stu);
		}
		System.out.println(
				"-----------------------------------------------------------------------------------------------------");

		System.out.println("총점순으로 내림차순 : ");
		Collections.sort(stuList, new SortTotalNumDesc());
		for (Student stu : stuList) {
			System.out.println(stu);
		}
		System.out.println(
				"-----------------------------------------------------------------------------------------------------");
	}
}
//내가 만든 객체(클래스)가 아니지만 내가 원하는 방식으로 정렬하고 싶을 때 사용하는 인터페이스 Comparator
//sort가 알아먹게 하기 위해서 comparator를 써야함
class SortTotalNumDesc implements Comparator<Student> {

	public int compare(Student stu1, Student stu2) {
		// TODO Auto-generated method stub

		if (stu1.getTotalScore() > stu2.getTotalScore()) {
			return -1;
		} else if (stu1.getTotalScore() < stu2.getTotalScore()) {
			return 1;
		} else {
//			return 0;
			return stu1.getStudentNum().compareTo(stu2.getStudentNum())*-1;
		}
	}
}
//내가 정렬시키고 싶은 객체 자체에 적용시키는 인터페이스 Comparable
//compareTo를 오버라이드 해야함
//└오름차순이라는 전제 조건 하에 내가 더 크면 양수 상대가 더 크면 음수
class Student implements Comparable<Student> {

	private String studentNum;
	private String name;
	private int koreanScore;
	private int englishScore;
	private int mathScore;
	private int totalScore;

	public Student(String studentNum, String name, int koreanScore, int englishScore, int mathScore, int totalScore) {
		super();
		this.studentNum = studentNum;
		this.name = name;
		this.koreanScore = koreanScore;
		this.englishScore = englishScore;
		this.mathScore = mathScore;
		this.totalScore = totalScore;
	}

	public String getStudentNum() {
		return studentNum;
	}

	public void setStudentNum(String studentNum) {
		this.studentNum = studentNum;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getKoreanScore() {
		return koreanScore;
	}

	public void setKoreanScore(int koreanScore) {
		this.koreanScore = koreanScore;
	}

	public int getEnglishScore() {
		return englishScore;
	}

	public void setEnglishScore(int englishScore) {
		this.englishScore = englishScore;
	}

	public int getMathScore() {
		return mathScore;
	}

	public void setMathScore(int mathScore) {
		this.mathScore = mathScore;
	}

	public int getTotalScore() {
		return totalScore;
	}

	public void setTotalScore(int totalScore) {
		this.totalScore = totalScore;
	}

	@Override
	public String toString() {
		return "Student [studentNum=" + studentNum + ", name=" + name + ", koreanScore=" + koreanScore
				+ ", englishScore=" + englishScore + ", mathScore=" + mathScore + ", totalScore=" + totalScore + "]";
	}

	@Override
	public int compareTo(Student stu) {
		return getStudentNum().compareTo(stu.getStudentNum());
	}
}
